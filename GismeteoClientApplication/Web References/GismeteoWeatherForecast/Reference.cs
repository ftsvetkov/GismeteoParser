//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace GismeteoClientApplication.GismeteoWeatherForecast {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WeatherForecastSoap", Namespace="http://tempuri.org/")]
    public partial class WeatherForecast : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableForecastDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCityWeatherForecastOnDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WeatherForecast() {
            this.Url = global::GismeteoClientApplication.Properties.Settings.Default.GismeteoClientApplication_GismeteoWeatherForecast_WeatherForecast;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCitiesCompletedEventHandler GetCitiesCompleted;
        
        /// <remarks/>
        public event GetAvailableForecastDatesCompletedEventHandler GetAvailableForecastDatesCompleted;
        
        /// <remarks/>
        public event GetCityWeatherForecastOnDateCompletedEventHandler GetCityWeatherForecastOnDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public City[] GetCities() {
            object[] results = this.Invoke("GetCities", new object[0]);
            return ((City[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCitiesAsync() {
            this.GetCitiesAsync(null);
        }
        
        /// <remarks/>
        public void GetCitiesAsync(object userState) {
            if ((this.GetCitiesOperationCompleted == null)) {
                this.GetCitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCitiesOperationCompleted);
            }
            this.InvokeAsync("GetCities", new object[0], this.GetCitiesOperationCompleted, userState);
        }
        
        private void OnGetCitiesOperationCompleted(object arg) {
            if ((this.GetCitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCitiesCompleted(this, new GetCitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableForecastDates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime[] GetAvailableForecastDates(int cityId) {
            object[] results = this.Invoke("GetAvailableForecastDates", new object[] {
                        cityId});
            return ((System.DateTime[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableForecastDatesAsync(int cityId) {
            this.GetAvailableForecastDatesAsync(cityId, null);
        }
        
        /// <remarks/>
        public void GetAvailableForecastDatesAsync(int cityId, object userState) {
            if ((this.GetAvailableForecastDatesOperationCompleted == null)) {
                this.GetAvailableForecastDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableForecastDatesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableForecastDates", new object[] {
                        cityId}, this.GetAvailableForecastDatesOperationCompleted, userState);
        }
        
        private void OnGetAvailableForecastDatesOperationCompleted(object arg) {
            if ((this.GetAvailableForecastDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableForecastDatesCompleted(this, new GetAvailableForecastDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCityWeatherForecastOnDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WeatherPoint GetCityWeatherForecastOnDate(int cityId, System.DateTime date) {
            object[] results = this.Invoke("GetCityWeatherForecastOnDate", new object[] {
                        cityId,
                        date});
            return ((WeatherPoint)(results[0]));
        }
        
        /// <remarks/>
        public void GetCityWeatherForecastOnDateAsync(int cityId, System.DateTime date) {
            this.GetCityWeatherForecastOnDateAsync(cityId, date, null);
        }
        
        /// <remarks/>
        public void GetCityWeatherForecastOnDateAsync(int cityId, System.DateTime date, object userState) {
            if ((this.GetCityWeatherForecastOnDateOperationCompleted == null)) {
                this.GetCityWeatherForecastOnDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCityWeatherForecastOnDateOperationCompleted);
            }
            this.InvokeAsync("GetCityWeatherForecastOnDate", new object[] {
                        cityId,
                        date}, this.GetCityWeatherForecastOnDateOperationCompleted, userState);
        }
        
        private void OnGetCityWeatherForecastOnDateOperationCompleted(object arg) {
            if ((this.GetCityWeatherForecastOnDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCityWeatherForecastOnDateCompleted(this, new GetCityWeatherForecastOnDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class City {
        
        private System.Nullable<int> idField;
        
        private string nameField;
        
        private string pathField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class WeatherPoint {
        
        private string cityNameField;
        
        private string pathField;
        
        private System.DateTime forecastDateField;
        
        private System.DateTime parsedAtField;
        
        private short minTempCelsiusField;
        
        private short minTempFahrenheitField;
        
        private short maxTempCelsiusField;
        
        private short maxTempFahrenheitField;
        
        private ushort maxWindSpeedMetersPerSecondField;
        
        private ushort maxWindSpeedMilesPerHourField;
        
        private ushort maxWindSpeedKilometersPerHourField;
        
        private System.Nullable<float> precipitationAmountField;
        
        private string summaryField;
        
        /// <remarks/>
        public string CityName {
            get {
                return this.cityNameField;
            }
            set {
                this.cityNameField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ForecastDate {
            get {
                return this.forecastDateField;
            }
            set {
                this.forecastDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ParsedAt {
            get {
                return this.parsedAtField;
            }
            set {
                this.parsedAtField = value;
            }
        }
        
        /// <remarks/>
        public short MinTempCelsius {
            get {
                return this.minTempCelsiusField;
            }
            set {
                this.minTempCelsiusField = value;
            }
        }
        
        /// <remarks/>
        public short MinTempFahrenheit {
            get {
                return this.minTempFahrenheitField;
            }
            set {
                this.minTempFahrenheitField = value;
            }
        }
        
        /// <remarks/>
        public short MaxTempCelsius {
            get {
                return this.maxTempCelsiusField;
            }
            set {
                this.maxTempCelsiusField = value;
            }
        }
        
        /// <remarks/>
        public short MaxTempFahrenheit {
            get {
                return this.maxTempFahrenheitField;
            }
            set {
                this.maxTempFahrenheitField = value;
            }
        }
        
        /// <remarks/>
        public ushort MaxWindSpeedMetersPerSecond {
            get {
                return this.maxWindSpeedMetersPerSecondField;
            }
            set {
                this.maxWindSpeedMetersPerSecondField = value;
            }
        }
        
        /// <remarks/>
        public ushort MaxWindSpeedMilesPerHour {
            get {
                return this.maxWindSpeedMilesPerHourField;
            }
            set {
                this.maxWindSpeedMilesPerHourField = value;
            }
        }
        
        /// <remarks/>
        public ushort MaxWindSpeedKilometersPerHour {
            get {
                return this.maxWindSpeedKilometersPerHourField;
            }
            set {
                this.maxWindSpeedKilometersPerHourField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<float> PrecipitationAmount {
            get {
                return this.precipitationAmountField;
            }
            set {
                this.precipitationAmountField = value;
            }
        }
        
        /// <remarks/>
        public string Summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCitiesCompletedEventHandler(object sender, GetCitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public City[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((City[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetAvailableForecastDatesCompletedEventHandler(object sender, GetAvailableForecastDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableForecastDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableForecastDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCityWeatherForecastOnDateCompletedEventHandler(object sender, GetCityWeatherForecastOnDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCityWeatherForecastOnDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCityWeatherForecastOnDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WeatherPoint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WeatherPoint)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591